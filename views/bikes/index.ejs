
<style>
	#playing-area {
		background: #000;
		width: 800px;
		margin: auto;
		padding: 20px;
	}
	
	.game-text {
		color: #33B5E5;
		text-align: center;
	}
	
	#game-message {
		font-size: 1.5em;
		font-weight: bold;
	}
	
	.game-over {
		color: #FF4444
	}
	
	#game-canvas {
		border: 1px solid #33B5E5;
		display: block;
		margin: 20px auto;
	}
</style>

<script>

$(function() {

	var gameCanvas = {
		element: $('#game-canvas').get(0),
		context: $('#game-canvas').get(0).getContext('2d')
	}
	
	var gameExtent = [41, 31]
	
	$(document).keydown(function(event) {
	
		var captured = true
		var d = null;
		
		switch (event.which) {
			case 87: d = 'n'; break
			case 83: d = 's'; break
			case 68: d = 'e'; break
			case 65: d = 'w'; break
			default: captured = false
		}
		
		if (captured) {
			if(typeof r.setDirection === "function") r.setDirection(d)
			event.preventDefault()
			return false
		}
	})
	
	var runGame = function () {
		
		// The playing grid consists of 41x31 squares, each of size 15 pixels
		// Initialize the grid as empty
		var grid = []
		for(var i = 0; i < gameExtent[0]; i++) {
			grid[i] = []
			for(var j = 0; j < gameExtent[1]; j++) {
				grid[i][j] = false
			}
		}
		
		var positions = [[20, 28]]
		var direction = "n"
		var intervalClock = null
		
		this.updateGameCanvas = function () {
			
			ctx = gameCanvas.context
			ctx.save()
			
			var homeColors = ['#33B5E5', '#1C637C', '#165063', '#113C49']
			
			ctx.fillStyle = homeColors[0]
			ctx.strokeStyle = "transparent"
			ctx.lineWidth = 0
			
			// In reverse order, paint head last
			for(var i = 0; i < positions.length; i++) {
			
				var distanceFromEnd = positions.length - i - 1
				ctx.fillStyle = (distanceFromEnd >= homeColors.length) ? homeColors[homeColors.length-1] : homeColors[distanceFromEnd]
				var square = positions[i]
				
				ctx.beginPath()
				ctx.rect(square[0]*15, square[1]*15, 15, 15)
				
				ctx.stroke()
				ctx.fill()
			}
			
			ctx.restore()
		}
		
		this.nextMove = function () {
			var currentPosition = positions[positions.length-1]
			
			var newPosition = []
			
			switch (direction) {
				case 'n': newPosition = [currentPosition[0], currentPosition[1]-1]; break
				case 's': newPosition = [currentPosition[0], currentPosition[1]+1]; break
				case 'e': newPosition = [currentPosition[0]+1, currentPosition[1]]; break
				case 'w': newPosition = [currentPosition[0]-1, currentPosition[1]]; break
				default: console.error("Invalid direction")
			}
			
			// Grid position may be true (occupied) or undefined (out of bounds)
			if(grid[newPosition[0]][newPosition[1]] !== false) {
				clearInterval(intervalClock)
				$('#game-message').text("You're dead. Idiot.").addClass("game-over")
			} else {
				positions.push(newPosition)
				grid[newPosition[0]][newPosition[1]] = true
				updateGameCanvas()
			}
		}
		
		this.setDirection = function (d) { direction = d }
		
		this.go = function () {
			intervalClock = setInterval(this.nextMove, 800)
		}
		
		updateGameCanvas()
		go()
		return this
	}

	var r = runGame()
})

</script>

<div class="page-header">
	<h1>Bikes</h1>
</div>

<div class="row">
	<div class="span12">
		<div id="playing-area">
			<div id="game-message" class="game-text">Test Message</div>
			<canvas id="game-canvas" width="615" height="465"></canvas>
			<div id="game-instructions" class="game-text">Use WASD to move your dot</div>
		</div>
	</div>
</div>
